// Code generated by skv2. DO NOT EDIT.

package v1alpha3

import (
	networking_istio_io_v1alpha3 "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for DestinationRule Client from Client
func DestinationRuleClientProvider(client client.Client) networking_istio_io_v1alpha3.DestinationRuleClient {
	return networking_istio_io_v1alpha3.NewDestinationRuleClient(client)
}

type DestinationRuleClientFactory func(client client.Client) networking_istio_io_v1alpha3.DestinationRuleClient

func DestinationRuleClientFactoryProvider() DestinationRuleClientFactory {
	return DestinationRuleClientProvider
}

type DestinationRuleClientFromConfigFactory func(cfg *rest.Config) (networking_istio_io_v1alpha3.DestinationRuleClient, error)

func DestinationRuleClientFromConfigFactoryProvider() DestinationRuleClientFromConfigFactory {
	return func(cfg *rest.Config) (networking_istio_io_v1alpha3.DestinationRuleClient, error) {
		clients, err := networking_istio_io_v1alpha3.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.DestinationRules(), nil
	}
}

// Provider for EnvoyFilter Client from Client
func EnvoyFilterClientProvider(client client.Client) networking_istio_io_v1alpha3.EnvoyFilterClient {
	return networking_istio_io_v1alpha3.NewEnvoyFilterClient(client)
}

type EnvoyFilterClientFactory func(client client.Client) networking_istio_io_v1alpha3.EnvoyFilterClient

func EnvoyFilterClientFactoryProvider() EnvoyFilterClientFactory {
	return EnvoyFilterClientProvider
}

type EnvoyFilterClientFromConfigFactory func(cfg *rest.Config) (networking_istio_io_v1alpha3.EnvoyFilterClient, error)

func EnvoyFilterClientFromConfigFactoryProvider() EnvoyFilterClientFromConfigFactory {
	return func(cfg *rest.Config) (networking_istio_io_v1alpha3.EnvoyFilterClient, error) {
		clients, err := networking_istio_io_v1alpha3.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.EnvoyFilters(), nil
	}
}

// Provider for Gateway Client from Client
func GatewayClientProvider(client client.Client) networking_istio_io_v1alpha3.GatewayClient {
	return networking_istio_io_v1alpha3.NewGatewayClient(client)
}

type GatewayClientFactory func(client client.Client) networking_istio_io_v1alpha3.GatewayClient

func GatewayClientFactoryProvider() GatewayClientFactory {
	return GatewayClientProvider
}

type GatewayClientFromConfigFactory func(cfg *rest.Config) (networking_istio_io_v1alpha3.GatewayClient, error)

func GatewayClientFromConfigFactoryProvider() GatewayClientFromConfigFactory {
	return func(cfg *rest.Config) (networking_istio_io_v1alpha3.GatewayClient, error) {
		clients, err := networking_istio_io_v1alpha3.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.Gateways(), nil
	}
}

// Provider for ServiceEntry Client from Client
func ServiceEntryClientProvider(client client.Client) networking_istio_io_v1alpha3.ServiceEntryClient {
	return networking_istio_io_v1alpha3.NewServiceEntryClient(client)
}

type ServiceEntryClientFactory func(client client.Client) networking_istio_io_v1alpha3.ServiceEntryClient

func ServiceEntryClientFactoryProvider() ServiceEntryClientFactory {
	return ServiceEntryClientProvider
}

type ServiceEntryClientFromConfigFactory func(cfg *rest.Config) (networking_istio_io_v1alpha3.ServiceEntryClient, error)

func ServiceEntryClientFromConfigFactoryProvider() ServiceEntryClientFromConfigFactory {
	return func(cfg *rest.Config) (networking_istio_io_v1alpha3.ServiceEntryClient, error) {
		clients, err := networking_istio_io_v1alpha3.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.ServiceEntries(), nil
	}
}

// Provider for VirtualService Client from Client
func VirtualServiceClientProvider(client client.Client) networking_istio_io_v1alpha3.VirtualServiceClient {
	return networking_istio_io_v1alpha3.NewVirtualServiceClient(client)
}

type VirtualServiceClientFactory func(client client.Client) networking_istio_io_v1alpha3.VirtualServiceClient

func VirtualServiceClientFactoryProvider() VirtualServiceClientFactory {
	return VirtualServiceClientProvider
}

type VirtualServiceClientFromConfigFactory func(cfg *rest.Config) (networking_istio_io_v1alpha3.VirtualServiceClient, error)

func VirtualServiceClientFromConfigFactoryProvider() VirtualServiceClientFromConfigFactory {
	return func(cfg *rest.Config) (networking_istio_io_v1alpha3.VirtualServiceClient, error) {
		clients, err := networking_istio_io_v1alpha3.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.VirtualServices(), nil
	}
}
