// Code generated by skv2. DO NOT EDIT.

package v1alpha2

import (
	linkerd_io_v1alpha2 "github.com/solo-io/external-apis/pkg/api/linkerd/linkerd.io/v1alpha2"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for ServiceProfileClient from Clientset
func ServiceProfileClientFromClientsetProvider(clients linkerd_io_v1alpha2.Clientset) linkerd_io_v1alpha2.ServiceProfileClient {
	return clients.ServiceProfiles()
}

// Provider for ServiceProfile Client from Client
func ServiceProfileClientProvider(client client.Client) linkerd_io_v1alpha2.ServiceProfileClient {
	return linkerd_io_v1alpha2.NewServiceProfileClient(client)
}

type ServiceProfileClientFactory func(client client.Client) linkerd_io_v1alpha2.ServiceProfileClient

func ServiceProfileClientFactoryProvider() ServiceProfileClientFactory {
	return ServiceProfileClientProvider
}

type ServiceProfileClientFromConfigFactory func(cfg *rest.Config) (linkerd_io_v1alpha2.ServiceProfileClient, error)

func ServiceProfileClientFromConfigFactoryProvider() ServiceProfileClientFromConfigFactory {
	return func(cfg *rest.Config) (linkerd_io_v1alpha2.ServiceProfileClient, error) {
		clients, err := linkerd_io_v1alpha2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.ServiceProfiles(), nil
	}
}
