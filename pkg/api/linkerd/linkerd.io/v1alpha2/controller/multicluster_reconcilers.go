// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	linkerd_io_v1alpha2 "github.com/linkerd/linkerd2/controller/gen/apis/serviceprofile/v1alpha2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the ServiceProfile Resource across clusters.
// implemented by the user
type MulticlusterServiceProfileReconciler interface {
	ReconcileServiceProfile(clusterName string, obj *linkerd_io_v1alpha2.ServiceProfile) (reconcile.Result, error)
}

// Reconcile deletion events for the ServiceProfile Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterServiceProfileDeletionReconciler interface {
	ReconcileServiceProfileDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterServiceProfileReconcilerFuncs struct {
	OnReconcileServiceProfile         func(clusterName string, obj *linkerd_io_v1alpha2.ServiceProfile) (reconcile.Result, error)
	OnReconcileServiceProfileDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterServiceProfileReconcilerFuncs) ReconcileServiceProfile(clusterName string, obj *linkerd_io_v1alpha2.ServiceProfile) (reconcile.Result, error) {
	if f.OnReconcileServiceProfile == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileServiceProfile(clusterName, obj)
}

func (f *MulticlusterServiceProfileReconcilerFuncs) ReconcileServiceProfileDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileServiceProfileDeletion == nil {
		return nil
	}
	return f.OnReconcileServiceProfileDeletion(clusterName, req)
}

type MulticlusterServiceProfileReconcileLoop interface {
	// AddMulticlusterServiceProfileReconciler adds a MulticlusterServiceProfileReconciler to the MulticlusterServiceProfileReconcileLoop.
	AddMulticlusterServiceProfileReconciler(ctx context.Context, rec MulticlusterServiceProfileReconciler, predicates ...predicate.Predicate)
}

type multiclusterServiceProfileReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterServiceProfileReconcileLoop) AddMulticlusterServiceProfileReconciler(ctx context.Context, rec MulticlusterServiceProfileReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericServiceProfileMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterServiceProfileReconcileLoop(name string, cw multicluster.ClusterWatcher) MulticlusterServiceProfileReconcileLoop {
	return &multiclusterServiceProfileReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &linkerd_io_v1alpha2.ServiceProfile{})}
}

type genericServiceProfileMulticlusterReconciler struct {
	reconciler MulticlusterServiceProfileReconciler
}

func (g genericServiceProfileMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterServiceProfileDeletionReconciler); ok {
		return deletionReconciler.ReconcileServiceProfileDeletion(cluster, req)
	}
	return nil
}

func (g genericServiceProfileMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*linkerd_io_v1alpha2.ServiceProfile)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: ServiceProfile handler received event for %T", object)
	}
	return g.reconciler.ReconcileServiceProfile(cluster, obj)
}
