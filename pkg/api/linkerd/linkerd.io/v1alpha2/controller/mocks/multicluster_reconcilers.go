// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/linkerd/linkerd2/controller/gen/apis/serviceprofile/v1alpha2"
	controller "github.com/solo-io/external-apis/pkg/api/linkerd/linkerd.io/v1alpha2/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterServiceProfileReconciler is a mock of MulticlusterServiceProfileReconciler interface
type MockMulticlusterServiceProfileReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterServiceProfileReconcilerMockRecorder
}

// MockMulticlusterServiceProfileReconcilerMockRecorder is the mock recorder for MockMulticlusterServiceProfileReconciler
type MockMulticlusterServiceProfileReconcilerMockRecorder struct {
	mock *MockMulticlusterServiceProfileReconciler
}

// NewMockMulticlusterServiceProfileReconciler creates a new mock instance
func NewMockMulticlusterServiceProfileReconciler(ctrl *gomock.Controller) *MockMulticlusterServiceProfileReconciler {
	mock := &MockMulticlusterServiceProfileReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterServiceProfileReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterServiceProfileReconciler) EXPECT() *MockMulticlusterServiceProfileReconcilerMockRecorder {
	return m.recorder
}

// ReconcileServiceProfile mocks base method
func (m *MockMulticlusterServiceProfileReconciler) ReconcileServiceProfile(clusterName string, obj *v1alpha2.ServiceProfile) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileServiceProfile", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileServiceProfile indicates an expected call of ReconcileServiceProfile
func (mr *MockMulticlusterServiceProfileReconcilerMockRecorder) ReconcileServiceProfile(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceProfile", reflect.TypeOf((*MockMulticlusterServiceProfileReconciler)(nil).ReconcileServiceProfile), clusterName, obj)
}

// MockMulticlusterServiceProfileDeletionReconciler is a mock of MulticlusterServiceProfileDeletionReconciler interface
type MockMulticlusterServiceProfileDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterServiceProfileDeletionReconcilerMockRecorder
}

// MockMulticlusterServiceProfileDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterServiceProfileDeletionReconciler
type MockMulticlusterServiceProfileDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterServiceProfileDeletionReconciler
}

// NewMockMulticlusterServiceProfileDeletionReconciler creates a new mock instance
func NewMockMulticlusterServiceProfileDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterServiceProfileDeletionReconciler {
	mock := &MockMulticlusterServiceProfileDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterServiceProfileDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterServiceProfileDeletionReconciler) EXPECT() *MockMulticlusterServiceProfileDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileServiceProfileDeletion mocks base method
func (m *MockMulticlusterServiceProfileDeletionReconciler) ReconcileServiceProfileDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileServiceProfileDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileServiceProfileDeletion indicates an expected call of ReconcileServiceProfileDeletion
func (mr *MockMulticlusterServiceProfileDeletionReconcilerMockRecorder) ReconcileServiceProfileDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceProfileDeletion", reflect.TypeOf((*MockMulticlusterServiceProfileDeletionReconciler)(nil).ReconcileServiceProfileDeletion), clusterName, req)
}

// MockMulticlusterServiceProfileReconcileLoop is a mock of MulticlusterServiceProfileReconcileLoop interface
type MockMulticlusterServiceProfileReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterServiceProfileReconcileLoopMockRecorder
}

// MockMulticlusterServiceProfileReconcileLoopMockRecorder is the mock recorder for MockMulticlusterServiceProfileReconcileLoop
type MockMulticlusterServiceProfileReconcileLoopMockRecorder struct {
	mock *MockMulticlusterServiceProfileReconcileLoop
}

// NewMockMulticlusterServiceProfileReconcileLoop creates a new mock instance
func NewMockMulticlusterServiceProfileReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterServiceProfileReconcileLoop {
	mock := &MockMulticlusterServiceProfileReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterServiceProfileReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterServiceProfileReconcileLoop) EXPECT() *MockMulticlusterServiceProfileReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterServiceProfileReconciler mocks base method
func (m *MockMulticlusterServiceProfileReconcileLoop) AddMulticlusterServiceProfileReconciler(ctx context.Context, rec controller.MulticlusterServiceProfileReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterServiceProfileReconciler", varargs...)
}

// AddMulticlusterServiceProfileReconciler indicates an expected call of AddMulticlusterServiceProfileReconciler
func (mr *MockMulticlusterServiceProfileReconcileLoopMockRecorder) AddMulticlusterServiceProfileReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterServiceProfileReconciler", reflect.TypeOf((*MockMulticlusterServiceProfileReconcileLoop)(nil).AddMulticlusterServiceProfileReconciler), varargs...)
}
