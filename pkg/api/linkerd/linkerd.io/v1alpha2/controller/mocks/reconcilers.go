// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/linkerd/linkerd2/controller/gen/apis/serviceprofile/v1alpha2"
	controller "github.com/solo-io/external-apis/pkg/api/linkerd/linkerd.io/v1alpha2/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockServiceProfileReconciler is a mock of ServiceProfileReconciler interface
type MockServiceProfileReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProfileReconcilerMockRecorder
}

// MockServiceProfileReconcilerMockRecorder is the mock recorder for MockServiceProfileReconciler
type MockServiceProfileReconcilerMockRecorder struct {
	mock *MockServiceProfileReconciler
}

// NewMockServiceProfileReconciler creates a new mock instance
func NewMockServiceProfileReconciler(ctrl *gomock.Controller) *MockServiceProfileReconciler {
	mock := &MockServiceProfileReconciler{ctrl: ctrl}
	mock.recorder = &MockServiceProfileReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceProfileReconciler) EXPECT() *MockServiceProfileReconcilerMockRecorder {
	return m.recorder
}

// ReconcileServiceProfile mocks base method
func (m *MockServiceProfileReconciler) ReconcileServiceProfile(obj *v1alpha2.ServiceProfile) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileServiceProfile", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileServiceProfile indicates an expected call of ReconcileServiceProfile
func (mr *MockServiceProfileReconcilerMockRecorder) ReconcileServiceProfile(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceProfile", reflect.TypeOf((*MockServiceProfileReconciler)(nil).ReconcileServiceProfile), obj)
}

// MockServiceProfileDeletionReconciler is a mock of ServiceProfileDeletionReconciler interface
type MockServiceProfileDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProfileDeletionReconcilerMockRecorder
}

// MockServiceProfileDeletionReconcilerMockRecorder is the mock recorder for MockServiceProfileDeletionReconciler
type MockServiceProfileDeletionReconcilerMockRecorder struct {
	mock *MockServiceProfileDeletionReconciler
}

// NewMockServiceProfileDeletionReconciler creates a new mock instance
func NewMockServiceProfileDeletionReconciler(ctrl *gomock.Controller) *MockServiceProfileDeletionReconciler {
	mock := &MockServiceProfileDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockServiceProfileDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceProfileDeletionReconciler) EXPECT() *MockServiceProfileDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileServiceProfileDeletion mocks base method
func (m *MockServiceProfileDeletionReconciler) ReconcileServiceProfileDeletion(req reconcile.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReconcileServiceProfileDeletion", req)
}

// ReconcileServiceProfileDeletion indicates an expected call of ReconcileServiceProfileDeletion
func (mr *MockServiceProfileDeletionReconcilerMockRecorder) ReconcileServiceProfileDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceProfileDeletion", reflect.TypeOf((*MockServiceProfileDeletionReconciler)(nil).ReconcileServiceProfileDeletion), req)
}

// MockServiceProfileFinalizer is a mock of ServiceProfileFinalizer interface
type MockServiceProfileFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProfileFinalizerMockRecorder
}

// MockServiceProfileFinalizerMockRecorder is the mock recorder for MockServiceProfileFinalizer
type MockServiceProfileFinalizerMockRecorder struct {
	mock *MockServiceProfileFinalizer
}

// NewMockServiceProfileFinalizer creates a new mock instance
func NewMockServiceProfileFinalizer(ctrl *gomock.Controller) *MockServiceProfileFinalizer {
	mock := &MockServiceProfileFinalizer{ctrl: ctrl}
	mock.recorder = &MockServiceProfileFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceProfileFinalizer) EXPECT() *MockServiceProfileFinalizerMockRecorder {
	return m.recorder
}

// ReconcileServiceProfile mocks base method
func (m *MockServiceProfileFinalizer) ReconcileServiceProfile(obj *v1alpha2.ServiceProfile) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileServiceProfile", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileServiceProfile indicates an expected call of ReconcileServiceProfile
func (mr *MockServiceProfileFinalizerMockRecorder) ReconcileServiceProfile(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceProfile", reflect.TypeOf((*MockServiceProfileFinalizer)(nil).ReconcileServiceProfile), obj)
}

// ServiceProfileFinalizerName mocks base method
func (m *MockServiceProfileFinalizer) ServiceProfileFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceProfileFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceProfileFinalizerName indicates an expected call of ServiceProfileFinalizerName
func (mr *MockServiceProfileFinalizerMockRecorder) ServiceProfileFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceProfileFinalizerName", reflect.TypeOf((*MockServiceProfileFinalizer)(nil).ServiceProfileFinalizerName))
}

// FinalizeServiceProfile mocks base method
func (m *MockServiceProfileFinalizer) FinalizeServiceProfile(obj *v1alpha2.ServiceProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeServiceProfile", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeServiceProfile indicates an expected call of FinalizeServiceProfile
func (mr *MockServiceProfileFinalizerMockRecorder) FinalizeServiceProfile(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeServiceProfile", reflect.TypeOf((*MockServiceProfileFinalizer)(nil).FinalizeServiceProfile), obj)
}

// MockServiceProfileReconcileLoop is a mock of ServiceProfileReconcileLoop interface
type MockServiceProfileReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProfileReconcileLoopMockRecorder
}

// MockServiceProfileReconcileLoopMockRecorder is the mock recorder for MockServiceProfileReconcileLoop
type MockServiceProfileReconcileLoopMockRecorder struct {
	mock *MockServiceProfileReconcileLoop
}

// NewMockServiceProfileReconcileLoop creates a new mock instance
func NewMockServiceProfileReconcileLoop(ctrl *gomock.Controller) *MockServiceProfileReconcileLoop {
	mock := &MockServiceProfileReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockServiceProfileReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceProfileReconcileLoop) EXPECT() *MockServiceProfileReconcileLoopMockRecorder {
	return m.recorder
}

// RunServiceProfileReconciler mocks base method
func (m *MockServiceProfileReconcileLoop) RunServiceProfileReconciler(ctx context.Context, rec controller.ServiceProfileReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunServiceProfileReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunServiceProfileReconciler indicates an expected call of RunServiceProfileReconciler
func (mr *MockServiceProfileReconcileLoopMockRecorder) RunServiceProfileReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunServiceProfileReconciler", reflect.TypeOf((*MockServiceProfileReconcileLoop)(nil).RunServiceProfileReconciler), varargs...)
}
