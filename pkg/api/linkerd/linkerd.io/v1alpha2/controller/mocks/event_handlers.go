// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/linkerd/linkerd2/controller/gen/apis/serviceprofile/v1alpha2"
	controller "github.com/solo-io/external-apis/pkg/api/linkerd/linkerd.io/v1alpha2/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockServiceProfileEventHandler is a mock of ServiceProfileEventHandler interface
type MockServiceProfileEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProfileEventHandlerMockRecorder
}

// MockServiceProfileEventHandlerMockRecorder is the mock recorder for MockServiceProfileEventHandler
type MockServiceProfileEventHandlerMockRecorder struct {
	mock *MockServiceProfileEventHandler
}

// NewMockServiceProfileEventHandler creates a new mock instance
func NewMockServiceProfileEventHandler(ctrl *gomock.Controller) *MockServiceProfileEventHandler {
	mock := &MockServiceProfileEventHandler{ctrl: ctrl}
	mock.recorder = &MockServiceProfileEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceProfileEventHandler) EXPECT() *MockServiceProfileEventHandlerMockRecorder {
	return m.recorder
}

// CreateServiceProfile mocks base method
func (m *MockServiceProfileEventHandler) CreateServiceProfile(obj *v1alpha2.ServiceProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceProfile", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateServiceProfile indicates an expected call of CreateServiceProfile
func (mr *MockServiceProfileEventHandlerMockRecorder) CreateServiceProfile(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceProfile", reflect.TypeOf((*MockServiceProfileEventHandler)(nil).CreateServiceProfile), obj)
}

// UpdateServiceProfile mocks base method
func (m *MockServiceProfileEventHandler) UpdateServiceProfile(old, new *v1alpha2.ServiceProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceProfile", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceProfile indicates an expected call of UpdateServiceProfile
func (mr *MockServiceProfileEventHandlerMockRecorder) UpdateServiceProfile(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceProfile", reflect.TypeOf((*MockServiceProfileEventHandler)(nil).UpdateServiceProfile), old, new)
}

// DeleteServiceProfile mocks base method
func (m *MockServiceProfileEventHandler) DeleteServiceProfile(obj *v1alpha2.ServiceProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceProfile", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceProfile indicates an expected call of DeleteServiceProfile
func (mr *MockServiceProfileEventHandlerMockRecorder) DeleteServiceProfile(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceProfile", reflect.TypeOf((*MockServiceProfileEventHandler)(nil).DeleteServiceProfile), obj)
}

// GenericServiceProfile mocks base method
func (m *MockServiceProfileEventHandler) GenericServiceProfile(obj *v1alpha2.ServiceProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericServiceProfile", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericServiceProfile indicates an expected call of GenericServiceProfile
func (mr *MockServiceProfileEventHandlerMockRecorder) GenericServiceProfile(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericServiceProfile", reflect.TypeOf((*MockServiceProfileEventHandler)(nil).GenericServiceProfile), obj)
}

// MockServiceProfileEventWatcher is a mock of ServiceProfileEventWatcher interface
type MockServiceProfileEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProfileEventWatcherMockRecorder
}

// MockServiceProfileEventWatcherMockRecorder is the mock recorder for MockServiceProfileEventWatcher
type MockServiceProfileEventWatcherMockRecorder struct {
	mock *MockServiceProfileEventWatcher
}

// NewMockServiceProfileEventWatcher creates a new mock instance
func NewMockServiceProfileEventWatcher(ctrl *gomock.Controller) *MockServiceProfileEventWatcher {
	mock := &MockServiceProfileEventWatcher{ctrl: ctrl}
	mock.recorder = &MockServiceProfileEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceProfileEventWatcher) EXPECT() *MockServiceProfileEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockServiceProfileEventWatcher) AddEventHandler(ctx context.Context, h controller.ServiceProfileEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockServiceProfileEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockServiceProfileEventWatcher)(nil).AddEventHandler), varargs...)
}
